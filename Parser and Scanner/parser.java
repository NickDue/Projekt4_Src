
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\012\000" +
    "\002\007\007\000\002\010\011\000\002\005\004\000\002" +
    "\005\006\000\002\036\010\000\002\042\005\000\002\042" +
    "\003\000\002\050\005\000\002\047\003\000\002\047\003" +
    "\000\002\011\006\000\002\012\003\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\043\006" +
    "\000\002\044\005\000\002\044\005\000\002\044\003\000" +
    "\002\032\005\000\002\032\004\000\002\052\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\015" +
    "\012\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\021\006\000\002\041\011\000\002\022\013\000" +
    "\002\023\010\000\002\017\012\000\002\060\003\000\002" +
    "\060\005\000\002\024\006\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\062\005" +
    "\000\002\062\003\000\002\026\007\000\002\027\003\000" +
    "\002\027\003\000\002\030\007\000\002\031\005\000\002" +
    "\031\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\040\005\000\002\040\003" +
    "\000\002\040\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\045\006\000\002\045" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\055\004\000\002\055\004\000\002\055\003\000\002" +
    "\046\003\000\002\046\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\020\005\021\040\010\042\020\062\011\063" +
    "\007\064\015\065\004\001\002\000\006\034\230\040\227" +
    "\001\002\000\004\002\000\001\002\000\020\005\ufffd\040" +
    "\ufffd\042\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\001\002" +
    "\000\006\034\230\040\227\001\002\000\004\002\ufffe\001" +
    "\002\000\006\034\230\040\227\001\002\000\004\002\235" +
    "\001\002\000\020\005\ufffa\040\ufffa\042\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\001\002\000\020\005\021\040\010" +
    "\042\020\062\011\063\007\064\015\065\004\001\002\000" +
    "\006\034\230\040\227\001\002\000\020\005\ufffb\040\ufffb" +
    "\042\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\001\002\000" +
    "\004\042\032\001\002\000\004\012\022\001\002\000\020" +
    "\005\ufffc\040\ufffc\042\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\001\002\000\006\060\023\061\025\001\002\000\004" +
    "\006\uffed\001\002\000\004\006\026\001\002\000\004\006" +
    "\uffec\001\002\000\004\020\027\001\002\000\004\007\030" +
    "\001\002\000\004\041\031\001\002\000\020\005\ufff7\040" +
    "\ufff7\042\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\001\002" +
    "\000\006\006\033\012\034\001\002\000\012\062\011\063" +
    "\007\064\015\065\004\001\002\000\020\006\044\020\035" +
    "\023\040\024\037\025\045\040\036\042\041\001\002\000" +
    "\042\004\uffa5\007\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\001\002\000\030\007\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\001\002\000\042\004\uffa3" +
    "\007\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\001\002\000\042\004\uffa4\007\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\001\002\000\040\007\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\001\002\000\004" +
    "\041\061\001\002\000\040\007\uffbb\036\053\037\055\040" +
    "\054\041\uffbb\045\050\046\057\047\052\050\051\051\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\001\002\000" +
    "\020\006\044\020\035\023\040\024\037\025\045\040\036" +
    "\042\041\001\002\000\042\004\uffa2\007\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\001" +
    "\002\000\004\007\047\001\002\000\042\004\uffa0\007\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\001\002\000\020\006\uffb9\020\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\040\uffb9\042\uffb9\001\002\000\020\006\uffb7" +
    "\020\uffb7\023\uffb7\024\uffb7\025\uffb7\040\uffb7\042\uffb7\001" +
    "\002\000\020\006\uffb8\020\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\040\uffb8\042\uffb8\001\002\000\020\006\uffb5\020\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\040\uffb5\042\uffb5\001\002\000\020" +
    "\006\uffb3\020\uffb3\023\uffb3\024\uffb3\025\uffb3\040\uffb3\042" +
    "\uffb3\001\002\000\020\006\uffb4\020\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\040\uffb4\042\uffb4\001\002\000\020\006\044\020" +
    "\035\023\040\024\037\025\045\040\036\042\041\001\002" +
    "\000\020\006\uffb6\020\uffb6\023\uffb6\024\uffb6\025\uffb6\040" +
    "\uffb6\042\uffb6\001\002\000\030\007\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\001\002\000\022\005\ufff8\034\ufff8\040\ufff8" +
    "\042\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\001\002\000" +
    "\004\042\224\001\002\000\004\007\064\001\002\000\004" +
    "\010\065\001\002\000\022\013\100\015\067\016\102\017" +
    "\071\026\111\027\073\040\104\042\075\001\002\000\022" +
    "\013\uffe3\015\uffe3\016\uffe3\017\uffe3\026\uffe3\027\uffe3\040" +
    "\uffe3\042\uffe3\001\002\000\004\006\216\001\002\000\022" +
    "\013\uffe7\015\uffe7\016\uffe7\017\uffe7\026\uffe7\027\uffe7\040" +
    "\uffe7\042\uffe7\001\002\000\004\020\211\001\002\000\004" +
    "\006\205\001\002\000\004\006\uffc4\001\002\000\022\013" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\026\uffd9\027\uffd9\040\uffd9" +
    "\042\uffd9\001\002\000\006\006\170\012\171\001\002\000" +
    "\022\013\uffda\015\uffda\016\uffda\017\uffda\026\uffda\027\uffda" +
    "\040\uffda\042\uffda\001\002\000\022\013\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\026\uffe5\027\uffe5\040\uffe5\042\uffe5\001\002" +
    "\000\004\006\152\001\002\000\022\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\026\uffdb\027\uffdb\040\uffdb\042\uffdb\001\002" +
    "\000\004\035\116\001\002\000\004\011\115\001\002\000" +
    "\006\011\uffea\034\uffea\001\002\000\022\013\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\026\uffe6\027\uffe6\040\uffe6\042\uffe6\001" +
    "\002\000\022\013\uffe4\015\uffe4\016\uffe4\017\uffe4\026\uffe4" +
    "\027\uffe4\040\uffe4\042\uffe4\001\002\000\022\013\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\026\uffdc\027\uffdc\040\uffdc\042\uffdc" +
    "\001\002\000\022\013\uffe8\015\uffe8\016\uffe8\017\uffe8\026" +
    "\uffe8\027\uffe8\040\uffe8\042\uffe8\001\002\000\004\006\uffc5" +
    "\001\002\000\022\013\uffe9\015\uffe9\016\uffe9\017\uffe9\026" +
    "\uffe9\027\uffe9\040\uffe9\042\uffe9\001\002\000\022\013\100" +
    "\015\067\016\102\017\071\026\111\027\073\040\104\042" +
    "\075\001\002\000\006\011\uffeb\034\uffeb\001\002\000\020" +
    "\005\ufff9\040\ufff9\042\ufff9\062\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\001\002\000\032\013\100\015\067\016\102\017\071" +
    "\026\111\027\073\040\104\042\075\062\011\063\007\064" +
    "\015\065\004\001\002\000\004\042\151\001\002\000\004" +
    "\034\123\001\002\000\004\034\uffef\001\002\000\004\034" +
    "\ufff0\001\002\000\004\015\124\001\002\000\004\006\125" +
    "\001\002\000\020\006\044\020\035\023\040\024\037\025" +
    "\045\040\127\042\041\001\002\000\004\007\147\001\002" +
    "\000\020\007\uffb1\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\001\002\000\016\051\134\052\131\053\135" +
    "\054\133\055\137\056\136\001\002\000\020\006\uffad\020" +
    "\uffad\023\uffad\024\uffad\025\uffad\040\uffad\042\uffad\001\002" +
    "\000\020\006\044\020\035\023\040\024\037\025\045\040" +
    "\036\042\041\001\002\000\020\006\uffac\020\uffac\023\uffac" +
    "\024\uffac\025\uffac\040\uffac\042\uffac\001\002\000\020\006" +
    "\uffae\020\uffae\023\uffae\024\uffae\025\uffae\040\uffae\042\uffae" +
    "\001\002\000\020\006\uffb0\020\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\040\uffb0\042\uffb0\001\002\000\020\006\uffaf\020\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\040\uffaf\042\uffaf\001\002\000" +
    "\020\006\uffab\020\uffab\023\uffab\024\uffab\025\uffab\040\uffab" +
    "\042\uffab\001\002\000\010\036\141\037\144\040\143\001" +
    "\002\000\020\006\044\020\035\023\040\024\037\025\045" +
    "\040\127\042\041\001\002\000\004\007\uffb2\001\002\000" +
    "\004\007\uffa8\001\002\000\020\006\044\020\035\023\040" +
    "\024\037\025\045\040\127\042\041\001\002\000\004\007" +
    "\uffa9\001\002\000\004\007\uffaa\001\002\000\004\041\150" +
    "\001\002\000\022\013\uffd2\015\uffd2\016\uffd2\017\uffd2\026" +
    "\uffd2\027\uffd2\040\uffd2\042\uffd2\001\002\000\004\012\034" +
    "\001\002\000\020\006\044\020\035\023\040\024\037\025" +
    "\045\040\127\042\041\001\002\000\004\007\154\001\002" +
    "\000\004\035\155\001\002\000\032\013\100\015\067\016" +
    "\102\017\071\026\111\027\073\040\104\042\075\062\011" +
    "\063\007\064\015\065\004\001\002\000\004\034\157\001" +
    "\002\000\006\014\160\040\161\001\002\000\006\013\100" +
    "\035\164\001\002\000\022\013\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\026\uffd5\027\uffd5\040\uffd5\042\uffd5\001\002\000\022" +
    "\013\uffd6\015\uffd6\016\uffd6\017\uffd6\026\uffd6\027\uffd6\040" +
    "\uffd6\042\uffd6\001\002\000\022\013\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\026\uffd8\027\uffd8\040\uffd8\042\uffd8\001\002\000" +
    "\032\013\100\015\067\016\102\017\071\026\111\027\073" +
    "\040\104\042\075\062\011\063\007\064\015\065\004\001" +
    "\002\000\022\013\uffd7\015\uffd7\016\uffd7\017\uffd7\026\uffd7" +
    "\027\uffd7\040\uffd7\042\uffd7\001\002\000\004\034\167\001" +
    "\002\000\022\013\uffd4\015\uffd4\016\uffd4\017\uffd4\026\uffd4" +
    "\027\uffd4\040\uffd4\042\uffd4\001\002\000\020\006\044\020" +
    "\035\023\040\024\037\025\045\040\174\042\176\001\002" +
    "\000\020\006\044\020\035\023\040\024\037\025\045\040" +
    "\036\042\041\001\002\000\004\041\173\001\002\000\022" +
    "\013\uffcd\015\uffcd\016\uffcd\017\uffcd\026\uffcd\027\uffcd\040" +
    "\uffcd\042\uffcd\001\002\000\004\007\uffdf\001\002\000\004" +
    "\007\204\001\002\000\004\004\uffa1\001\002\000\004\004" +
    "\200\001\002\000\020\006\044\020\035\023\040\024\037" +
    "\025\045\040\174\042\176\001\002\000\004\007\uffe0\001" +
    "\002\000\020\006\044\020\035\023\040\024\037\025\045" +
    "\040\174\042\176\001\002\000\004\007\uffe1\001\002\000" +
    "\022\013\uffe2\015\uffe2\016\uffe2\017\uffe2\026\uffe2\027\uffe2" +
    "\040\uffe2\042\uffe2\001\002\000\016\006\044\020\035\023" +
    "\040\024\037\025\045\042\041\001\002\000\004\007\207" +
    "\001\002\000\004\041\210\001\002\000\022\013\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\026\uffc6\027\uffc6\040\uffc6\042\uffc6" +
    "\001\002\000\004\022\212\001\002\000\004\035\213\001" +
    "\002\000\032\013\100\015\067\016\102\017\071\026\111" +
    "\027\073\040\104\042\075\062\011\063\007\064\015\065" +
    "\004\001\002\000\004\034\215\001\002\000\022\013\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\026\uffd1\027\uffd1\040\uffd1\042" +
    "\uffd1\001\002\000\004\024\217\001\002\000\004\007\220" +
    "\001\002\000\004\035\221\001\002\000\032\013\100\015" +
    "\067\016\102\017\071\026\111\027\073\040\104\042\075" +
    "\062\011\063\007\064\015\065\004\001\002\000\004\034" +
    "\223\001\002\000\022\013\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\026\uffd3\027\uffd3\040\uffd3\042\uffd3\001\002\000\006\004" +
    "\225\007\ufff6\001\002\000\012\062\011\063\007\064\015" +
    "\065\004\001\002\000\004\007\ufff5\001\002\000\004\042" +
    "\uffc7\001\002\000\004\020\232\001\002\000\004\042\uffc9" +
    "\001\002\000\004\035\233\001\002\000\004\042\uffc8\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\042\uffcc\001\002\000\004\042\uffcb\001\002\000" +
    "\004\042\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\020\002\011\003\004\004\013\006\005\007" +
    "\015\010\012\025\016\001\001\000\004\062\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\236\001" +
    "\001\000\002\001\001\000\004\062\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\233\004\013\006" +
    "\005\007\015\010\012\025\016\001\001\000\004\062\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\062\025\061\001\001\000" +
    "\006\037\042\040\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\055\001\001\000\006" +
    "\037\042\040\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\042\040\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\013\102" +
    "\014\112\015\106\022\075\023\073\024\105\026\065\027" +
    "\071\041\100\043\076\051\111\052\107\053\067\054\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\013\113\014" +
    "\112\015\106\022\075\023\073\024\105\026\065\027\071" +
    "\041\100\043\076\051\111\052\107\053\067\054\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\007\121" +
    "\013\120\014\112\015\106\022\075\023\073\024\105\025" +
    "\116\026\065\027\071\041\100\043\076\047\117\051\111" +
    "\052\107\053\067\054\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\037\042\040\127\045" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\131\001\001\000\002\001\001\000\006\037\042\040" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\141\001\001\000\010\037\042\040\127\045\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\042\040" +
    "\127\045\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\042\040\127\045\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\007\121\013\120\014\112\015" +
    "\106\022\075\023\073\024\105\025\116\026\065\027\071" +
    "\041\100\043\076\047\155\051\111\052\107\053\067\054" +
    "\104\001\001\000\002\001\001\000\006\016\162\021\161" +
    "\001\001\000\004\015\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\007\121\013\120" +
    "\014\112\015\106\022\075\023\073\024\105\025\116\026" +
    "\065\027\071\041\100\043\076\047\165\051\111\052\107" +
    "\053\067\054\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\176\044\174\001\001" +
    "\000\006\037\042\040\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\176\044\200\001" +
    "\001\000\002\001\001\000\006\037\176\044\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\121\013" +
    "\120\014\112\015\106\022\075\023\073\024\105\025\116" +
    "\026\065\027\071\041\100\043\076\047\213\051\111\052" +
    "\107\053\067\054\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\121\013\120\014\112\015\106\022\075" +
    "\023\073\024\105\025\116\026\065\027\071\041\100\043" +
    "\076\047\221\051\111\052\107\053\067\054\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\225\025\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	return lexer.next_token();
	
    }


	Lexer lexer;
	

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= programs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programs ::= prog programs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programs ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prog ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prog ::= dcl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prog ::= obj 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func ::= type IDENTIFIER LPAREN params RPAREN LCURLY stmts RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dcl ::= type IDENTIFIER ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dcl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // obj ::= IDENTIFIER ASSIGN objid LPAREN NUMBER RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= type IDENTIFIER COMMA params 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array ::= type IDENTIFIER ASSIGN LCURLY arrvalues RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arrvalues ::= value COMMA value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrvalues",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arrvalues ::= value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrvalues",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compound_stmt ::= RCURLY block LCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block ::= dcl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= stmts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // objfunc ::= objid DOT OBJFUNCID SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objfunc",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // objid ::= BUTTON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objid",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // objid ::= LED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("objid",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= stmt stmts 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= selection_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= iterative_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= jump_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_stmt ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_stmt ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_stmt ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_call ::= IDENTIFIER LPAREN actparams RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // actparams ::= IDENTIFIER COMMA actparams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actparams",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // actparams ::= value COMMA actparams 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actparams",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // actparams ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actparams",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // jump ::= return expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // jump ::= break SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // selection_stmt ::= ifstmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iterative_stmt ::= whilestmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterative_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iterative_stmt ::= dowhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterative_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iterative_stmt ::= forloop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterative_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifstmt ::= IF LPAREN bool RPAREN LSQBRACK block RSQBRACK elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elif ::= ELSE ifstmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elif ::= elsestmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elif ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elsestmt ::= ELSE LSQBRACK block RSQBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsestmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // whilestmt ::= WHILE LPAREN BOOLEAN RPAREN LSQBRACK block RSQBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dowhile ::= DO LSQBRACK block RSQBRACK WHILE LPAREN bool RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dowhile",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // forloop ::= LOOP NUMBER TIMES LSQBRACK block RSQBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forloop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // switch ::= when LPAREN bool RPAREN RCURLY case_stmt default_stmt LCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_expr ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // case_expr ::= expr COMMA case_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment ::= IDENTIFIER ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= NUMTYPE brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= STRTYPE brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= BOOLTYPE brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= CHARTYPE brackets 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // brackets ::= RSQBRACK NUMBER LSQBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // brackets ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("brackets",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print ::= printtype LPAREN value RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // printtype ::= PRINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtype",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // printtype ::= PRINTLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtype",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // wait ::= WAIT LPAREN time RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("wait",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // time ::= NUMBER timeunit time 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // time ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // timeunit ::= MILSEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeunit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // timeunit ::= SEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeunit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // timeunit ::= MIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeunit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // timeunit ::= HOUR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeunit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= value op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= value 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op ::= PLUSOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // op ::= SUBOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op ::= TIMESOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op ::= DIVOP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bool ::= expr logop expr nestbool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bool ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // logop ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logop",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logop ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logop",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logop ::= GTHAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logop",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logop ::= LTHAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logop",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logop ::= GTEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logop",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logop ::= LTEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logop",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nestbool ::= AND bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nestbool",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nestbool ::= OR bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nestbool",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nestbool ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nestbool",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // negate ::= NEGATION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negate",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // negate ::= EPSILON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negate",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // value ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // value ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // value ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
