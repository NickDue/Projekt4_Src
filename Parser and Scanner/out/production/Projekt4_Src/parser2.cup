import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;

import javax.xml.transform.*;
import javax.xml.transform.stream.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }
public static void main(String[] args) throws Exception {
      // initialize the symbol factory
      ComplexSymbolFactory csf = new ComplexSymbolFactory();
      // create a buffering scanner wrapper
      ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[0])),csf));
      // start parsing
      Parser p = new Parser(lexer,csf);
      XMLElement e = (XMLElement)p.parse().value;
      // create XML output file 
      XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
      XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
      // dump XML output to the file
      XMLElement.dump(lexer,sw,e,"expr","stmt");

       // transform the parse tree into an AST and a rendered HTML version
      Transformer transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("tree.xsl")));
      Source text = new StreamSource(new File(args[1]));
      transformer.transform(text, new StreamResult(new File("output.xml")));
      transformer = TransformerFactory.newInstance()
	    .newTransformer(new StreamSource(new File("tree-view.xsl")));
      text = new StreamSource(new File("output.xml"));
      transformer.transform(text, new StreamResult(new File("ast.html")));
  }


Lexer lexer;

:};	

scan with {:
	return lexer.next_token();
	:};




/* Terminals (tokens returned by the scanner) */


terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal		            CHAR;
terminal		            STRING;
terminal                BOOL;
terminal                NEGATION;
terminal                VOID;
terminal		            BUTTON;
terminal		            LED;
terminal		            MILSEC;
terminal		            SEC;
terminal		            MIN;
terminal		            HOUR;
terminal                PRINT;
terminal                INTLITERAL;
terminal                INT;
terminal		            PRINTLN;
terminal                IF;
terminal                ELSE;
terminal		            DO;
terminal                WHILE;
terminal		            LOOP;
terminal		            WHEN;
terminal                RETURN;
terminal		            TIME;
terminal IdTokenVal     ID;
terminal NumberToken    NUMBER;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal		            LSQBRACK;
terminal		            RSQBRACK;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE; //?
terminal                READ; //?
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;
terminal                BREAK;
terminal                COLON;
terminal                WAIT;
terminal                CASE;
terminal                DEFAULT;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FuncDeclNode     funcDecl;
non terminal ObjDeclNode      objDecl;
non terminal ObjFuncId        objFuncId;
non terminal LinkedList       fParams;
non terminal LinkedList       fParamsList;
non terminal FParamsDeclNode  fParamsDecl;
non terminal FuncBodyNode     funcBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal CaseNode         case_stmt;
non terminal DefaultNode      default_stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term;
non terminal CallExpNode      funccall;
non terminal LinkedList       actualList;
non terminal ArrayNode        array;
non terminal LinkedList       arrayval;
non terminal TypeNode         type;
non terminal ExpNode          loc;
non terminal IdNode           id;
 
 
/* NOTE: Add precedence associativity declarations here */
precedence right NEGATION;
precedence left TIMES, DIVIDE;
precedence left PLUS, MINUS;
precedence left GREATER, LESS, GREATEREQ, LESSEQ;
precedence left EQUALS, NOTEQUALS;
precedence left AND;
precedence left OR;
precedence right ASSIGN;


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | funcDecl:f
                {: RESULT = f;
                :}
                | objDecl:o
                {: RESULT = o;
                :}
                ;

varDeclList     ::= varDeclList:vdl varDecl:vd
                {: vdl.addLast(vd);
                   RESULT = vdl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

funcDecl        ::= type:t id:i fParams:f funcBody:fb
                {: RESULT = new FuncDeclNode(t, i, new FParamsListNode(f), fb);
                :}
                ;
                
objDecl         ::= id:i ASSIGN objFuncId:oid LPAREN NUMBER RPAREN SEMICOLON
                {: RESULT = new ObjDeclNode(i, oid/*,  size */ );
                :}
                ;

objFuncId       ::= BUTTON
                |   LED
                ;

fParams         ::= LPAREN RPAREN
                {: RESULT = new LinkedList<FParamsDeclNode>();
                :}
                | LPAREN fParamsList:fl RPAREN
                {: RESULT = fl;
                :}
                ;

fParamsList     ::= fParamsDecl:fd
                {: LinkedList<FParamsDeclNode> list = 
                                              new LinkedList<FParamsDeclNode>();
                   list.addLast(fd);
                   RESULT = list;
                :}
                | fParamsDecl:fd COMMA fParamsList:fl
                {: fl.addFirst(fd);
                   RESULT = fl;
                :}
                ;

fParamsDecl      ::= type:t id:i
                {: RESULT = new FParamsDeclNode(t, i);
                :}
                ;

funcBody          ::= LCURLY varDeclList:vdl stmtList:sl RCURLY
                {: RESULT = new FuncBodyNode(
                            new DeclListNode(vdl), new StmtListNode(sl));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s);
                   RESULT = sl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::=  assignExp:ae SEMICOLON
                {: RESULT = new AssignStmtNode(ae);
                :}             
                | PRINT LPAREN exp:e RPAREN SEMICOLON
                {: RESULT = new WriteStmtNode(e);
                :}                
                | IF LPAREN exp:e RPAREN LCURLY  stmtList:sl RCURLY
                {: RESULT = new IfStmtNode(e, new StmtListNode(sl));
                :}                
                | IF LPAREN exp:e RPAREN LCURLY stmtList:slt RCURLY ELSE LCURLY stmtList:sle RCURLY
                {: RESULT = new IfElseStmtNode(e, new StmtListNode(slt), new StmtListNode(sle));
                :}
                | DO LCURLY stmtList:sl RCURLY WHILE LPAREN exp:e RPAREN 
                {: RESULT = new DoWhileStmtNode(e, new StmtListNode(sl));
                :}    
                | WHILE LPAREN exp:e RPAREN LCURLY stmtList:sl RCURLY
                {: RESULT = new WhileStmtNode(e, new StmtListNode(sl));
                :}
                | LOOP INTLITERAL:i TIMES LSQBRACK stmtList:sl RSQBRACK
                {: RESULT = new ForLoopStmtNode(i.linenum, i.charnum, i.intVal, new StmtListNode(sl));
                :}
                | WHEN LPAREN exp:e RPAREN RCURLY case_stmt default_stmt LCURLY
                {: RESULT = new WhenLoopStmtNode(e, new StmtListNode(sl));
                :}
                | WAIT LPAREN TIME RPAREN SEMICOLON
                {: RESULT = new TimeNode(t);
                :}                
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | funccall:f SEMICOLON
                {: RESULT = new CallStmtNode(f);
                :}
                ;                

case_stmt       ::= CASE term:t COLON stmtList:st BREAK SEMICOLON
                {: RESULT = new CaseNode(t,new StmtListNode(st))
                :}
                ;

default_stmt    ::= DEFAULT COLON stmtList:st BREAK SEMICOLON
                {: RESULT = new DefaultNode(new StmtListNode(st))
                :}
                ;

assignExp       ::= id:i ASSIGN exp:e
                {: RESULT = new AssignNode(i, e);
                :}
                ;
                
exp             ::= assignExp:ae
                {: RESULT = ae;
                :}
                | exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}                
                | exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}                    
                | exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}    
                | exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}    
                | NOT exp:e
                {: RESULT = new NotNode(e);
                :}    
                | exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}    
                | exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}    
                | exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}    
                | exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}    
                | exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}    
                | exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}    
                | exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}    
                | exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}    
                | MINUS exp:e
                {: RESULT = new UnaryMinusNode(e);
                :}    
                | term:t
                {: RESULT = t;
                :}
                ;    
                
term            ::= id:i
                {: RESULT = i;
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | funccall:f
                {: RESULT = f;
                :}
                ;    

funccall          ::= id:i fParamsList SEMICOLON
                {: RESULT = new CallExpNode(i, 
                                new ExpListNode(new LinkedList<ExpNode>()));
                :}
                | id:i LPAREN actualList:al RPAREN SEMICOLON
                {: RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;
                
actualList      ::= exp:e
                {: LinkedList<ExpNode> list = new LinkedList<ExpNode>();
                   list.addLast(e);
                   RESULT = list;
                :}
                | actualList:al COMMA exp:e
                {: al.addLast(e);
                   RESULT = al;
                :}
                ;

array           ::= type ID:i ASSIGN LCURLY arrayval RCURLY
                ;

arrayval        ::= INTLITERAL
                |   STRINGLITERAL
                |   TRUE
                |   FALSE
                |   CHAR
                |   ID
                ;

type            ::= NUMBER
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                | STRING
                {: RESULT = new StringNode();
                :}
                | CHAR
                {: RESULT = new CharNode();
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:lc DOT id:i
                {: RESULT = new DotAccessExpNode(lc, i);
                :}
                ;
                
id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;