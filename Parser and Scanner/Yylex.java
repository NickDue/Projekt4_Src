// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/meerq/OneDrive/Skrivebord/Projekt4_Src/Parser and Scanner/scanner2.jflex

import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class NumberToken extends TokenVal {
  // new field: the value of the integer or double
    int intVal;
    double doubleVal;
  // constructor
    NumberTokenINT(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
    
    NumberTokenFLOAT(int line, int ch, double val) {
        super(line, ch);
    	doubleVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\4\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\12\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\6\1\0\1\25\1\26\1\27\1\30\1\31\2\25"+
    "\1\32\1\33\2\25\1\34\1\35\1\36\1\37\2\25"+
    "\1\40\1\41\1\42\1\43\5\25\1\44\1\45\1\46"+
    "\1\0\1\47\1\0\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\25\1\61\1\62\1\63"+
    "\1\64\1\65\1\25\1\66\1\67\1\70\1\71\1\72"+
    "\4\25\1\73\1\0\1\74\7\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\25\1\26\1\27\13\25"+
    "\1\30\1\31\1\32\1\33\1\34\4\0\1\35\1\36"+
    "\7\25\1\37\7\25\1\33\4\0\1\25\1\40\5\25"+
    "\1\41\1\25\1\42\1\25\1\43\3\25\1\44\1\33"+
    "\3\0\2\1\1\25\1\45\1\46\1\47\1\25\1\50"+
    "\3\25\1\51\1\52\1\0\1\44\1\17\1\1\3\0"+
    "\1\25\1\53\1\25\1\54\1\25\2\33\3\0\1\55"+
    "\1\56\1\25\1\57\1\1\1\0\1\60\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\75\0\267\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\364\0\u0131\0\75"+
    "\0\75\0\u016e\0\75\0\u01ab\0\u01e8\0\u0225\0\u0262\0\75"+
    "\0\75\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\75\0\75\0\75\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\75\0\75\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u01e8\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u01e8\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u01e8\0\u0ca1\0\u01e8\0\u0cde\0\u01e8\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\75\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u01e8\0\u01e8\0\u01e8\0\u0f7d\0\u01e8\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u01e8\0\u01e8\0\u1071\0\u10ae\0\u0e0f\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u01e8\0\u121c\0\u1259\0\u1296"+
    "\0\u10ae\0\u12d3\0\u1310\0\u134d\0\u138a\0\u01e8\0\u01e8\0\u13c7"+
    "\0\u01e8\0\u1404\0\u1441\0\u01e8\0\u147e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\5\25"+
    "\1\27\7\25\1\30\1\2\1\31\1\2\1\25\1\32"+
    "\1\33\1\25\1\34\1\35\1\25\1\36\1\37\1\25"+
    "\1\40\2\25\1\41\1\25\1\42\1\43\1\25\1\44"+
    "\1\45\1\46\76\0\1\3\73\0\2\6\1\0\2\6"+
    "\1\47\37\6\1\50\27\6\16\0\1\51\75\0\1\17"+
    "\10\0\1\52\1\0\1\53\2\0\1\54\3\0\1\55"+
    "\56\0\1\56\74\0\1\57\70\0\1\25\5\0\17\25"+
    "\3\0\24\25\21\0\1\25\5\0\16\25\1\60\3\0"+
    "\24\25\21\0\1\25\5\0\4\25\1\61\12\25\3\0"+
    "\24\25\21\0\1\25\5\0\17\25\3\0\15\25\1\62"+
    "\6\25\21\0\1\25\5\0\17\25\3\0\10\25\1\63"+
    "\13\25\21\0\1\25\5\0\17\25\3\0\12\25\1\64"+
    "\11\25\21\0\1\25\5\0\17\25\3\0\1\25\1\65"+
    "\22\25\21\0\1\25\5\0\17\25\3\0\15\25\1\66"+
    "\6\25\21\0\1\25\5\0\17\25\3\0\6\25\1\67"+
    "\5\25\1\70\7\25\21\0\1\25\5\0\17\25\3\0"+
    "\11\25\1\71\12\25\21\0\1\25\5\0\17\25\3\0"+
    "\17\25\1\72\4\25\21\0\1\25\5\0\17\25\3\0"+
    "\5\25\1\73\13\25\1\74\2\25\21\0\1\25\5\0"+
    "\17\25\3\0\17\25\1\75\4\25\21\0\1\25\5\0"+
    "\17\25\3\0\15\25\1\76\6\25\2\0\2\77\1\0"+
    "\2\77\2\6\36\77\1\6\15\77\1\6\4\77\1\6"+
    "\4\77\2\51\1\0\72\51\37\0\1\100\74\0\1\101"+
    "\70\0\1\102\72\0\1\103\62\0\1\25\5\0\15\25"+
    "\1\104\1\25\3\0\24\25\21\0\1\25\5\0\3\25"+
    "\1\105\13\25\3\0\24\25\21\0\1\25\5\0\17\25"+
    "\3\0\15\25\1\106\6\25\21\0\1\25\5\0\17\25"+
    "\3\0\1\25\1\107\22\25\21\0\1\25\5\0\17\25"+
    "\3\0\11\25\1\110\12\25\21\0\1\25\5\0\17\25"+
    "\3\0\12\25\1\111\11\25\21\0\1\25\5\0\17\25"+
    "\3\0\22\25\1\112\1\25\21\0\1\25\5\0\17\25"+
    "\3\0\21\25\1\113\2\25\21\0\1\25\5\0\17\25"+
    "\3\0\12\25\1\114\1\25\1\115\7\25\21\0\1\25"+
    "\5\0\17\25\3\0\11\25\1\116\12\25\21\0\1\25"+
    "\5\0\17\25\3\0\3\25\1\117\20\25\21\0\1\25"+
    "\5\0\17\25\3\0\17\25\1\120\4\25\21\0\1\25"+
    "\5\0\17\25\3\0\22\25\1\121\1\25\21\0\1\25"+
    "\5\0\17\25\3\0\11\25\1\122\12\25\2\0\2\77"+
    "\1\0\2\77\1\123\37\77\1\124\27\77\42\0\1\125"+
    "\75\0\1\126\65\0\1\127\1\0\1\130\65\0\1\131"+
    "\64\0\1\25\5\0\15\25\1\132\1\25\3\0\24\25"+
    "\21\0\1\25\5\0\17\25\3\0\12\25\1\133\11\25"+
    "\21\0\1\25\5\0\17\25\3\0\17\25\1\134\4\25"+
    "\21\0\1\25\5\0\17\25\3\0\6\25\1\135\15\25"+
    "\21\0\1\25\5\0\17\25\3\0\20\25\1\136\3\25"+
    "\21\0\1\25\5\0\17\25\3\0\17\25\1\137\4\25"+
    "\21\0\1\25\5\0\17\25\3\0\20\25\1\140\3\25"+
    "\21\0\1\25\5\0\17\25\3\0\14\25\1\141\7\25"+
    "\21\0\1\25\5\0\17\25\3\0\11\25\1\142\12\25"+
    "\21\0\1\25\5\0\17\25\3\0\5\25\1\143\16\25"+
    "\21\0\1\25\5\0\17\25\3\0\4\25\1\144\17\25"+
    "\2\0\2\145\1\0\2\145\1\146\1\77\36\145\1\77"+
    "\15\145\1\77\4\145\1\77\4\145\17\0\1\147\115\0"+
    "\1\150\75\0\1\151\52\0\1\152\74\0\1\153\74\0"+
    "\1\25\5\0\12\25\1\154\4\25\3\0\24\25\21\0"+
    "\1\25\5\0\17\25\3\0\5\25\1\155\16\25\21\0"+
    "\1\25\5\0\17\25\3\0\5\25\1\156\16\25\21\0"+
    "\1\25\5\0\17\25\3\0\21\25\1\157\2\25\21\0"+
    "\1\25\5\0\17\25\3\0\14\25\1\160\7\25\2\0"+
    "\2\145\1\0\2\145\1\123\67\145\2\161\1\0\2\161"+
    "\1\0\37\161\1\162\27\161\17\0\1\163\106\0\1\164"+
    "\62\0\1\152\15\0\1\54\3\0\1\55\52\0\1\153"+
    "\15\0\1\165\3\0\1\55\52\0\1\25\5\0\11\25"+
    "\1\166\5\25\3\0\24\25\21\0\1\25\5\0\17\25"+
    "\3\0\3\25\1\167\20\25\21\0\1\25\5\0\17\25"+
    "\3\0\12\25\1\170\11\25\21\0\1\25\5\0\17\25"+
    "\3\0\7\25\1\171\14\25\7\0\2\161\36\0\1\161"+
    "\15\0\1\161\4\0\1\161\23\0\1\163\12\0\1\53"+
    "\2\0\1\54\3\0\1\55\62\0\1\172\100\0\1\173"+
    "\60\0\1\25\5\0\17\25\3\0\14\25\1\174\7\25"+
    "\21\0\1\175\111\0\1\127\57\0\1\175\15\0\1\165"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5307];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\2\11\1\1\7\11\2\1\2\11"+
    "\1\1\1\11\4\1\2\11\13\1\3\11\2\1\4\0"+
    "\2\11\20\1\4\0\17\1\1\11\1\1\3\0\15\1"+
    "\1\0\3\1\3\0\7\1\3\0\5\1\1\0\1\1"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { Symbol S = new Symbol(sym.TIME, 
                             new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 49: break;
          case 2:
            { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
            }
            // fall through
          case 50: break;
          case 3:
            { CharNum.num += yytext().length();
            }
            // fall through
          case 51: break;
          case 4:
            { CharNum.num = 1;
            }
            // fall through
          case 52: break;
          case 5:
            { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 53: break;
          case 6:
            { // unterminated string
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated string literal ignored");
            }
            // fall through
          case 54: break;
          case 7:
            { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 55: break;
          case 8:
            { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 56: break;
          case 9:
            { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 57: break;
          case 10:
            { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 58: break;
          case 11:
            { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 59: break;
          case 12:
            { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 60: break;
          case 13:
            { Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 61: break;
          case 14:
            { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 62: break;
          case 15:
            { String checkString = yytext();
            
            int intVal;
            double doubleVal;
            
            if(checkString.contains(".")){
                doubleVal = Double.parseDouble(checkString);
                if(doubleVal > Double.MAX_VALUE){
                    ErrMsg.warn(yyline+1, CharNum.num,
                            "value of double is too large; using max value");
                    doubleVal = Double.MAX_VALUE;
                    Symbol S = new Symbol(sym.NUMBER,
                             new NumberTokenFLOAT(yyline+1, CharNum.num, intVal));
                    CharNum.num += yytext().length();
                }
	    }
	    
	    else {
                if (val > Integer.MAX_VALUE) {
                ErrMsg.warn(yyline+1, CharNum.num,
                            "integer literal too large; using max value");
                intVal = Integer.MAX_VALUE;
            } else {
                intVal = Integer.parseInt(yytext());
                Symbol S = new Symbol(sym.NUMBER,
                             new NumberTokenINT(yyline+1, CharNum.num, intVal));
                CharNum.num += yytext().length();
            }
           
            return S;
          }
            }
            // fall through
          case 63: break;
          case 16:
            { Symbol S = new Symbol(sym.COLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 64: break;
          case 17:
            { Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 65: break;
          case 18:
            { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 66: break;
          case 19:
            { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 67: break;
          case 20:
            { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 68: break;
          case 21:
            { Symbol S = new Symbol(sym.ID, 
                             new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 69: break;
          case 22:
            { Symbol S = new Symbol(sym.LSQBRACK, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 70: break;
          case 23:
            { Symbol S = new Symbol(sym.RSQBRACK, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 71: break;
          case 24:
            { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 72: break;
          case 25:
            { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
            }
            // fall through
          case 73: break;
          case 26:
            { String strVal = yytext();
            Symbol S = new Symbol(sym.STRINGLITERAL,
                             new StrLitTokenVal(yyline+1, CharNum.num, strVal));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 74: break;
          case 27:
            { // bad escape character
            ErrMsg.fatal(yyline+1, CharNum.num,
             "unterminated string literal with bad escaped character ignored");
            }
            // fall through
          case 75: break;
          case 28:
            { // comment - ignore. Note: don't need to update char num 
            // since everything to end of line will be ignored
            }
            // fall through
          case 76: break;
          case 29:
            { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
            }
            // fall through
          case 77: break;
          case 30:
            { Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
            }
            // fall through
          case 78: break;
          case 31:
            { Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 79: break;
          case 32:
            { Symbol S = new Symbol(sym.LED, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 80: break;
          case 33:
            { Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 81: break;
          case 34:
            { Symbol S = new Symbol(sym.MIN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 82: break;
          case 35:
            { Symbol S = new Symbol(sym.SEC, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 83: break;
          case 36:
            { // bad escape character
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "string literal with bad escaped character ignored");
            CharNum.num += yytext().length();
            }
            // fall through
          case 84: break;
          case 37:
            { Symbol S = new Symbol(sym.BOOLTYPE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 85: break;
          case 38:
            { Symbol S = new Symbol(sym.CHARTYPE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 86: break;
          case 39:
            { Symbol S = new Symbol(sym.ELIF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          
"else"    { Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }
          
"do"      { Symbol S = new Symbol(sym.DO, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }
          
"while"   { Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }
          
"loop"    { Symbol S = new Symbol(sym.LOOP, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }
          
"when"    { Symbol S = new Symbol(sym.WHEN, new TokenVal(yyline+1, 	
            CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"times"   { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, 	
            CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

          
"return"  { Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"break"   { Symbol S = new Symbol(sym.BREAK, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
          }

"default" { Symbol S = new Symbol(sym.DEFAULT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }
            }
            // fall through
          case 87: break;
          case 40:
            { Symbol S = new Symbol(sym.HOUR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 88: break;
          case 41:
            { Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 89: break;
          case 42:
            { Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 90: break;
          case 43:
            { Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 91: break;
          case 44:
            { Symbol S = new Symbol(sym.PRINT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 92: break;
          case 45:
            { Symbol S = new Symbol(sym.BUTTON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 93: break;
          case 46:
            { Symbol S = new Symbol(sym.MILSEC, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 94: break;
          case 47:
            { Symbol S = new Symbol(sym.STRING, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 95: break;
          case 48:
            { Symbol S = new Symbol(sym.PRINTLN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += yytext().length();
            return S;
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
